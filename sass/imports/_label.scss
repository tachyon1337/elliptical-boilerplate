
/* Variables ----------------------------------------------------------------------------------------------------------*/

$ui-label-padding:2px 4px 2px !default;
$ui-label-background:$inverse-color !default;
$ui-label-font-color: $white !default;
$ui-label-font-size:.8em !default;
$ui-label-font-weight:bold !default;
$ui-label-text-transform:none !default;
$ui-label-text-decoration:none !default;
$ui-label-text-align:center !default;
$ui-label-line-height:1 !default;
$ui-label-radius:$global-radius !default;
$ui-label-round-padding:1px 7px 2px !default;

$ui-semantic-label-margin: 1em 0 !default;
$ui-semantic-label-padding:.6em 0 .6em 2em !default;
$ui-semantic-label-font-size:1em !default;
$ui-semantic-label-border-radius:$global-radius !default;

/* Mixins -------------------------------------------------------------------------------------------------------------*/

%ui-semantic-label{
  margin:$ui-semantic-label-margin;
  padding:$ui-semantic-label-padding;
  width:100%;
  opacity:0;
  font-size:$ui-semantic-label-font-size;
  cursor:default;
  position:relative;
  border-radius:$ui-semantic-label-border-radius;
  @include flexbox($alignment:center,$justification:center);
  font-weight:normal;
  &.hidden{
    visibility: hidden;
  }
  &.visible{
    visibility: visible !important;
    opacity:1;
  }
  border:1px solid;
  &>button,ui-close{
    margin-left:auto;
    padding-right:.6em;
    background:none;
    border:none;
    font-size:1.5em;
    opacity:.2 !important;
    font-weight:bold;
    cursor:pointer;
  }
}
@mixin _semantic-label($component) {

  .ui-semantic-label,ui-semantic-label{
   @extend %ui-semantic-label;
    &.#{$component}{
      @include invoke-component-default-state($component);
      box-shadow:none !important;
      &>button{
        @extend %#{$component}-font !optional;
        &:hover,&:focus{
          opacity: .8 !important;
        }
      }
    }

  }

  span{
    &.warning{
      color:$component-warning-font-color;
    }
    &.success{
      color:$component-success-font-color;
    }
    &.info{
      color:$component-info-font-color;
    }
    &.error{
      color:$component-error-font-color;
    }
  }

}

@mixin ui-label($component:default){
  .ui-label {
    @include invoke-component-default-state($component);
    padding: $ui-label-padding;
    font-size: $ui-label-font-size;
    font-weight: $ui-label-font-weight;
    text-transform: $ui-label-text-transform;
    text-align: $ui-label-text-align;
    text-decoration: $ui-label-text-decoration;
    line-height: $ui-label-line-height;
    white-space: nowrap;
    display: inline;
    position: relative;
    cursor:default;
    &.radius {
      @include border-radius($ui-label-radius);
    }
    &.round {
      padding: $ui-label-round-padding;
      @include border-radius(1000px);

    }
  }

}

@mixin ui-semantic-checkboxes($padding:1em,$border-radius:$global-radius){
  .ui-semantic-checkbox,ui-semantic-checkbox{
    box-shadow:none !important;
    border-radius:$border-radius;
    padding:$padding;
    position:relative;
    input{
        top:0;
    }
    &.success{
      @include invoke-component-default-state(success);
      input[type="checkbox"] + label{
        color:$component-success-font-color;
        &:before{
          border-color:lighten($component-success-font-color,20%) !important;
          color:$component-success-font-color;
        }
      }
    }
    &.error{
      @include invoke-component-default-state(error);
      input[type="checkbox"] + label{
        color:$component-error-font-color;
        &:before{
          border-color:lighten($component-error-font-color,20%) !important;
          color:$component-error-font-color;
        }
      }
    }
    &.warning{
      @include invoke-component-default-state(warning);
      input[type="checkbox"] + label {
        color:$component-warning-font-color;
        &:before{
          border-color:lighten($component-warning-font-color,20%) !important;
          color:$component-warning-font-color;
        }
      }
    }
    &.info{
      @include invoke-component-default-state(info);
      input[type="checkbox"] + label {
        color:$component-info-font-color;
        &:before{
          border-color:lighten($component-info-font-color,20%) !important;
          color:$component-info-font-color;
        }
      }
    }
  }

}

@mixin ui-semantic-label(){
  @include _semantic-label(error);
  @include _semantic-label(info);
  @include _semantic-label(warning);
  @include _semantic-label(success);
}